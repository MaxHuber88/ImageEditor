package model.effects;

import static org.junit.Assert.assertEquals;

import java.util.ArrayList;
import java.util.List;
import model.ColorType;
import model.ImageImpl;
import model.Pixel;
import org.junit.Before;
import org.junit.Test;

/**
 * Class for testing the SharpenFilter class.
 */
public class SharpenTest {

  List<Pixel> list;
  ImageImpl img;
  BlurFilter blur;
  Sepia sepia;
  Greyscale greyscale;
  SharpenFilter sharpen;

  @Before
  public void setUp() {
    list = new ArrayList<>();
    list.add(new Pixel(0, 0, 10, 10, 10));
    list.add(new Pixel(1, 0, 50, 50, 50));
    list.add(new Pixel(2, 0, 150, 150, 150));

    list.add(new Pixel(0, 1, 50, 50, 50));
    list.add(new Pixel(1, 1, 50, 50, 50));
    list.add(new Pixel(2, 1, 150, 150, 150));

    list.add(new Pixel(0, 2, 150, 150, 150));
    list.add(new Pixel(1, 2, 150, 150, 150));
    list.add(new Pixel(2, 2, 250, 250, 250));

    img = new ImageImpl(list, 10, 10);
    blur = new BlurFilter();
    sepia = new Sepia();
    greyscale = new Greyscale();
    sharpen = new SharpenFilter();
  }

  @Test(expected = IllegalArgumentException.class)
  public void testSharpenNullImage() {
    ImageImpl sharp = sharpen.apply(null);
  }

  @Test
  public void testApplySharpenOnce() {
    //ImageImpl sharpImageImpl = sharpen.apply(img);
    ImageImpl sharpImageImpl = sharpen.apply(img);
    //the top left is representative of an edge, so it becomes darker
    //meanwhile the bottom right was bright, so it is deemed "unimportant"
    //by the sharpen filter and becomes brighter

    assertEquals(0, sharpImageImpl.getColorAt(ColorType.RED, 0, 0));
    assertEquals(0, sharpImageImpl.getColorAt(ColorType.GREEN, 0, 0));
    assertEquals(0, sharpImageImpl.getColorAt(ColorType.BLUE, 0, 0));

    assertEquals(84, sharpImageImpl.getColorAt(ColorType.RED, 1, 0));
    assertEquals(84, sharpImageImpl.getColorAt(ColorType.GREEN, 1, 0));
    assertEquals(84, sharpImageImpl.getColorAt(ColorType.BLUE, 1, 0));

    assertEquals(136, sharpImageImpl.getColorAt(ColorType.RED, 2, 0));
    assertEquals(136, sharpImageImpl.getColorAt(ColorType.GREEN, 2, 0));
    assertEquals(136, sharpImageImpl.getColorAt(ColorType.BLUE, 2, 0));

    assertEquals(84, sharpImageImpl.getColorAt(ColorType.RED, 0, 1));
    assertEquals(84, sharpImageImpl.getColorAt(ColorType.GREEN, 0, 1));
    assertEquals(84, sharpImageImpl.getColorAt(ColorType.BLUE, 0, 1));

    assertEquals(255, sharpImageImpl.getColorAt(ColorType.RED, 1, 1));
    assertEquals(255, sharpImageImpl.getColorAt(ColorType.GREEN, 1, 1));
    assertEquals(255, sharpImageImpl.getColorAt(ColorType.BLUE, 1, 1));

    assertEquals(255, sharpImageImpl.getColorAt(ColorType.RED, 2, 1));
    assertEquals(255, sharpImageImpl.getColorAt(ColorType.GREEN, 2, 1));
    assertEquals(255, sharpImageImpl.getColorAt(ColorType.BLUE, 2, 1));

    assertEquals(136, sharpImageImpl.getColorAt(ColorType.RED, 0, 2));
    assertEquals(136, sharpImageImpl.getColorAt(ColorType.GREEN, 0, 2));
    assertEquals(136, sharpImageImpl.getColorAt(ColorType.BLUE, 0, 2));

    assertEquals(255, sharpImageImpl.getColorAt(ColorType.RED, 1, 2));
    assertEquals(255, sharpImageImpl.getColorAt(ColorType.GREEN, 1, 2));
    assertEquals(255, sharpImageImpl.getColorAt(ColorType.BLUE, 1, 2));

    assertEquals(255, sharpImageImpl.getColorAt(ColorType.RED, 2, 2));
    assertEquals(255, sharpImageImpl.getColorAt(ColorType.GREEN, 2, 2));
    assertEquals(255, sharpImageImpl.getColorAt(ColorType.BLUE, 2, 2));
  }

  @Test
  public void testApplySharpenTwice() {
    ImageImpl onceSharpImageImpl = sharpen.apply(img);
    ImageImpl sharpImageImpl = sharpen.apply(onceSharpImageImpl);
    //the top left is representative of an edge, so it becomes darker
    //meanwhile the bottom right was bright, so it is deemed "unimportant"
    //by the sharpen filter and becomes brighter

    assertEquals(0, sharpImageImpl.getColorAt(ColorType.RED, 0, 0));
    assertEquals(0, sharpImageImpl.getColorAt(ColorType.GREEN, 0, 0));
    assertEquals(0, sharpImageImpl.getColorAt(ColorType.BLUE, 0, 0));

    assertEquals(185, sharpImageImpl.getColorAt(ColorType.RED, 1, 0));
    assertEquals(185, sharpImageImpl.getColorAt(ColorType.GREEN, 1, 0));
    assertEquals(185, sharpImageImpl.getColorAt(ColorType.BLUE, 1, 0));

    assertEquals(192, sharpImageImpl.getColorAt(ColorType.RED, 2, 0));
    assertEquals(192, sharpImageImpl.getColorAt(ColorType.GREEN, 2, 0));
    assertEquals(192, sharpImageImpl.getColorAt(ColorType.BLUE, 2, 0));

    assertEquals(185, sharpImageImpl.getColorAt(ColorType.RED, 0, 1));
    assertEquals(185, sharpImageImpl.getColorAt(ColorType.GREEN, 0, 1));
    assertEquals(185, sharpImageImpl.getColorAt(ColorType.BLUE, 0, 1));

    assertEquals(255, sharpImageImpl.getColorAt(ColorType.RED, 1, 1));
    assertEquals(255, sharpImageImpl.getColorAt(ColorType.GREEN, 1, 1));
    assertEquals(255, sharpImageImpl.getColorAt(ColorType.BLUE, 1, 1));

    assertEquals(255, sharpImageImpl.getColorAt(ColorType.RED, 2, 1));
    assertEquals(255, sharpImageImpl.getColorAt(ColorType.GREEN, 2, 1));
    assertEquals(255, sharpImageImpl.getColorAt(ColorType.BLUE, 2, 1));

    assertEquals(192, sharpImageImpl.getColorAt(ColorType.RED, 0, 2));
    assertEquals(192, sharpImageImpl.getColorAt(ColorType.GREEN, 0, 2));
    assertEquals(192, sharpImageImpl.getColorAt(ColorType.BLUE, 0, 2));

    assertEquals(255, sharpImageImpl.getColorAt(ColorType.RED, 1, 2));
    assertEquals(255, sharpImageImpl.getColorAt(ColorType.GREEN, 1, 2));
    assertEquals(255, sharpImageImpl.getColorAt(ColorType.BLUE, 1, 2));

    assertEquals(255, sharpImageImpl.getColorAt(ColorType.RED, 2, 2));
    assertEquals(255, sharpImageImpl.getColorAt(ColorType.GREEN, 2, 2));
    assertEquals(255, sharpImageImpl.getColorAt(ColorType.BLUE, 2, 2));
  }

  @Test
  public void testBlurOnSharpen() {
    // sharpened image
    ImageImpl sharpImageImpl = sharpen.apply(img);

    assertEquals(0, sharpImageImpl.getColorAt(ColorType.RED, 0, 0));
    assertEquals(0, sharpImageImpl.getColorAt(ColorType.GREEN, 0, 0));
    assertEquals(0, sharpImageImpl.getColorAt(ColorType.BLUE, 0, 0));

    assertEquals(84, sharpImageImpl.getColorAt(ColorType.RED, 1, 0));
    assertEquals(84, sharpImageImpl.getColorAt(ColorType.GREEN, 1, 0));
    assertEquals(84, sharpImageImpl.getColorAt(ColorType.BLUE, 1, 0));

    assertEquals(136, sharpImageImpl.getColorAt(ColorType.RED, 2, 0));
    assertEquals(136, sharpImageImpl.getColorAt(ColorType.GREEN, 2, 0));
    assertEquals(136, sharpImageImpl.getColorAt(ColorType.BLUE, 2, 0));

    assertEquals(84, sharpImageImpl.getColorAt(ColorType.RED, 0, 1));
    assertEquals(84, sharpImageImpl.getColorAt(ColorType.GREEN, 0, 1));
    assertEquals(84, sharpImageImpl.getColorAt(ColorType.BLUE, 0, 1));

    assertEquals(255, sharpImageImpl.getColorAt(ColorType.RED, 1, 1));
    assertEquals(255, sharpImageImpl.getColorAt(ColorType.GREEN, 1, 1));
    assertEquals(255, sharpImageImpl.getColorAt(ColorType.BLUE, 1, 1));

    assertEquals(255, sharpImageImpl.getColorAt(ColorType.RED, 2, 1));
    assertEquals(255, sharpImageImpl.getColorAt(ColorType.GREEN, 2, 1));
    assertEquals(255, sharpImageImpl.getColorAt(ColorType.BLUE, 2, 1));

    assertEquals(136, sharpImageImpl.getColorAt(ColorType.RED, 0, 2));
    assertEquals(136, sharpImageImpl.getColorAt(ColorType.GREEN, 0, 2));
    assertEquals(136, sharpImageImpl.getColorAt(ColorType.BLUE, 0, 2));

    assertEquals(255, sharpImageImpl.getColorAt(ColorType.RED, 1, 2));
    assertEquals(255, sharpImageImpl.getColorAt(ColorType.GREEN, 1, 2));
    assertEquals(255, sharpImageImpl.getColorAt(ColorType.BLUE, 1, 2));

    assertEquals(255, sharpImageImpl.getColorAt(ColorType.RED, 2, 2));
    assertEquals(255, sharpImageImpl.getColorAt(ColorType.GREEN, 2, 2));
    assertEquals(255, sharpImageImpl.getColorAt(ColorType.BLUE, 2, 2));

    // blur applied to sharpened image
    ImageImpl blurOnSharpen = blur.apply(sharpImageImpl);

    assertEquals(36, blurOnSharpen.getColorAt(ColorType.RED, 0, 0));
    assertEquals(36, blurOnSharpen.getColorAt(ColorType.GREEN, 0, 0));
    assertEquals(36, blurOnSharpen.getColorAt(ColorType.BLUE, 0, 0));

    assertEquals(90, blurOnSharpen.getColorAt(ColorType.RED, 1, 0));
    assertEquals(90, blurOnSharpen.getColorAt(ColorType.GREEN, 1, 0));
    assertEquals(90, blurOnSharpen.getColorAt(ColorType.BLUE, 1, 0));

    assertEquals(91, blurOnSharpen.getColorAt(ColorType.RED, 2, 0));
    assertEquals(91, blurOnSharpen.getColorAt(ColorType.GREEN, 2, 0));
    assertEquals(91, blurOnSharpen.getColorAt(ColorType.BLUE, 2, 0));

  }

  @Test
  public void testSepiaOnSharpen() {
    // sharpened image
    ImageImpl sharpImageImpl = sharpen.apply(img);

    assertEquals(0, sharpImageImpl.getColorAt(ColorType.RED, 0, 0));
    assertEquals(0, sharpImageImpl.getColorAt(ColorType.GREEN, 0, 0));
    assertEquals(0, sharpImageImpl.getColorAt(ColorType.BLUE, 0, 0));

    assertEquals(84, sharpImageImpl.getColorAt(ColorType.RED, 1, 0));
    assertEquals(84, sharpImageImpl.getColorAt(ColorType.GREEN, 1, 0));
    assertEquals(84, sharpImageImpl.getColorAt(ColorType.BLUE, 1, 0));

    assertEquals(136, sharpImageImpl.getColorAt(ColorType.RED, 2, 0));
    assertEquals(136, sharpImageImpl.getColorAt(ColorType.GREEN, 2, 0));
    assertEquals(136, sharpImageImpl.getColorAt(ColorType.BLUE, 2, 0));

    assertEquals(84, sharpImageImpl.getColorAt(ColorType.RED, 0, 1));
    assertEquals(84, sharpImageImpl.getColorAt(ColorType.GREEN, 0, 1));
    assertEquals(84, sharpImageImpl.getColorAt(ColorType.BLUE, 0, 1));

    assertEquals(255, sharpImageImpl.getColorAt(ColorType.RED, 1, 1));
    assertEquals(255, sharpImageImpl.getColorAt(ColorType.GREEN, 1, 1));
    assertEquals(255, sharpImageImpl.getColorAt(ColorType.BLUE, 1, 1));

    assertEquals(255, sharpImageImpl.getColorAt(ColorType.RED, 2, 1));
    assertEquals(255, sharpImageImpl.getColorAt(ColorType.GREEN, 2, 1));
    assertEquals(255, sharpImageImpl.getColorAt(ColorType.BLUE, 2, 1));

    assertEquals(136, sharpImageImpl.getColorAt(ColorType.RED, 0, 2));
    assertEquals(136, sharpImageImpl.getColorAt(ColorType.GREEN, 0, 2));
    assertEquals(136, sharpImageImpl.getColorAt(ColorType.BLUE, 0, 2));

    assertEquals(255, sharpImageImpl.getColorAt(ColorType.RED, 1, 2));
    assertEquals(255, sharpImageImpl.getColorAt(ColorType.GREEN, 1, 2));
    assertEquals(255, sharpImageImpl.getColorAt(ColorType.BLUE, 1, 2));

    assertEquals(255, sharpImageImpl.getColorAt(ColorType.RED, 2, 2));
    assertEquals(255, sharpImageImpl.getColorAt(ColorType.GREEN, 2, 2));
    assertEquals(255, sharpImageImpl.getColorAt(ColorType.BLUE, 2, 2));

    // sepia applied to sharpened image
    ImageImpl sepiaOnSharpen = sepia.apply(sharpImageImpl);

    assertEquals(0, sepiaOnSharpen.getColorAt(ColorType.RED, 0, 0));
    assertEquals(0, sepiaOnSharpen.getColorAt(ColorType.GREEN, 0, 0));
    assertEquals(0, sepiaOnSharpen.getColorAt(ColorType.BLUE, 0, 0));

    assertEquals(113, sepiaOnSharpen.getColorAt(ColorType.RED, 1, 0));
    assertEquals(101, sepiaOnSharpen.getColorAt(ColorType.GREEN, 1, 0));
    assertEquals(78, sepiaOnSharpen.getColorAt(ColorType.BLUE, 1, 0));

    assertEquals(183, sepiaOnSharpen.getColorAt(ColorType.RED, 2, 0));
    assertEquals(163, sepiaOnSharpen.getColorAt(ColorType.GREEN, 2, 0));
    assertEquals(127, sepiaOnSharpen.getColorAt(ColorType.BLUE, 2, 0));

  }

  @Test
  public void testGreyScaleOnSharpen() {
    // sharpened image
    ImageImpl sharpImageImpl = sharpen.apply(img);

    assertEquals(0, sharpImageImpl.getColorAt(ColorType.RED, 0, 0));
    assertEquals(0, sharpImageImpl.getColorAt(ColorType.GREEN, 0, 0));
    assertEquals(0, sharpImageImpl.getColorAt(ColorType.BLUE, 0, 0));

    assertEquals(84, sharpImageImpl.getColorAt(ColorType.RED, 1, 0));
    assertEquals(84, sharpImageImpl.getColorAt(ColorType.GREEN, 1, 0));
    assertEquals(84, sharpImageImpl.getColorAt(ColorType.BLUE, 1, 0));

    assertEquals(136, sharpImageImpl.getColorAt(ColorType.RED, 2, 0));
    assertEquals(136, sharpImageImpl.getColorAt(ColorType.GREEN, 2, 0));
    assertEquals(136, sharpImageImpl.getColorAt(ColorType.BLUE, 2, 0));

    assertEquals(84, sharpImageImpl.getColorAt(ColorType.RED, 0, 1));
    assertEquals(84, sharpImageImpl.getColorAt(ColorType.GREEN, 0, 1));
    assertEquals(84, sharpImageImpl.getColorAt(ColorType.BLUE, 0, 1));

    assertEquals(255, sharpImageImpl.getColorAt(ColorType.RED, 1, 1));
    assertEquals(255, sharpImageImpl.getColorAt(ColorType.GREEN, 1, 1));
    assertEquals(255, sharpImageImpl.getColorAt(ColorType.BLUE, 1, 1));

    assertEquals(255, sharpImageImpl.getColorAt(ColorType.RED, 2, 1));
    assertEquals(255, sharpImageImpl.getColorAt(ColorType.GREEN, 2, 1));
    assertEquals(255, sharpImageImpl.getColorAt(ColorType.BLUE, 2, 1));

    assertEquals(136, sharpImageImpl.getColorAt(ColorType.RED, 0, 2));
    assertEquals(136, sharpImageImpl.getColorAt(ColorType.GREEN, 0, 2));
    assertEquals(136, sharpImageImpl.getColorAt(ColorType.BLUE, 0, 2));

    assertEquals(255, sharpImageImpl.getColorAt(ColorType.RED, 1, 2));
    assertEquals(255, sharpImageImpl.getColorAt(ColorType.GREEN, 1, 2));
    assertEquals(255, sharpImageImpl.getColorAt(ColorType.BLUE, 1, 2));

    assertEquals(255, sharpImageImpl.getColorAt(ColorType.RED, 2, 2));
    assertEquals(255, sharpImageImpl.getColorAt(ColorType.GREEN, 2, 2));
    assertEquals(255, sharpImageImpl.getColorAt(ColorType.BLUE, 2, 2));

    // sepia applied to sharpened image
    ImageImpl greyScaleOnSharpen = greyscale.apply(sharpImageImpl);

    assertEquals(0, greyScaleOnSharpen.getColorAt(ColorType.RED, 0, 0));
    assertEquals(0, greyScaleOnSharpen.getColorAt(ColorType.GREEN, 0, 0));
    assertEquals(0, greyScaleOnSharpen.getColorAt(ColorType.BLUE, 0, 0));

    assertEquals(84, greyScaleOnSharpen.getColorAt(ColorType.RED, 1, 0));
    assertEquals(84, greyScaleOnSharpen.getColorAt(ColorType.GREEN, 1, 0));
    assertEquals(84, greyScaleOnSharpen.getColorAt(ColorType.BLUE, 1, 0));

    assertEquals(136, greyScaleOnSharpen.getColorAt(ColorType.RED, 2, 0));
    assertEquals(136, greyScaleOnSharpen.getColorAt(ColorType.GREEN, 2, 0));
    assertEquals(136, greyScaleOnSharpen.getColorAt(ColorType.BLUE, 2, 0));
  }
}
